---
import Card from '@components/Card.astro';
import StatsGroup from '@components/StatsGroup.astro';
import FuelLayout from '@layouts/FuelLayout.astro';
import { FuelService } from '@services/fuel';
import { getFuelSearchParams } from '@utils/fuel';

const { from, to } = getFuelSearchParams(Astro.request.url);
const fuelService = new FuelService();
const { totalCostPer100km, totalFuelUsage, totalCostReduced, totalAmount, totalMileage, rows } =
  await fuelService.getData(from, to);

const startDateStr = rows[0]?.date;
const startDate = typeof startDateStr === 'string' ? new Date(startDateStr) : new Date();
const endDateStr = rows.at(-1)?.date;
const endDate = typeof endDateStr === 'string' ? new Date(endDateStr) : new Date();

const stats = [
  [
    {
      title: 'Od',
      value: startDate.toLocaleDateString('pl-PL').split('.').slice(0, 2).join('.'),
      desc: startDate.getFullYear(),
    },
    {
      title: 'Do',
      value: endDate.toLocaleDateString('pl-PL').split('.').slice(0, 2).join('.'),
      desc: endDate.getFullYear(),
    },
    {
      title: 'Przebieg',
      value: totalMileage,
      desc: 'km',
    },
  ],
  [
    {
      title: 'Spalanie',
      value: totalFuelUsage,
      desc: 'l / 100 km',
    },

    {
      title: 'Ilość paliwa',
      value: totalAmount,
      desc: 'l',
    },
  ],
  [
    {
      title: 'Koszt jednostkowy netto',
      value: totalCostPer100km.toFixed(2),
      desc: 'zł  / 100 km',
    },
    {
      title: 'Koszt całkowity netto',
      value: totalCostReduced.toFixed(2),
      desc: 'zł',
    },
  ],
];
---

<FuelLayout>
  <div class="w-full">
    {
      rows.length < 2 ? (
        <Card class="mt-3">Brak danych dla obecnych filtrów</Card>
      ) : (
        stats.map((s) => (
          <Card class="mt-3">
            <StatsGroup stats={s} />
          </Card>
        ))
      )
    }
  </div>
</FuelLayout>
