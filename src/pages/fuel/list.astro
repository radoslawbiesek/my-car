---
import Card from '@components/Card.astro';
import FuelLayout from '@layouts/FuelLayout.astro';
import { FuelService } from '@services/fuel';
import { calculateFuelUsage, sum, zloty, getFuelSearchParams } from '@utils/fuel';

const { from, to } = getFuelSearchParams(Astro.request.url);
const fuelService = new FuelService();
const { rows, totalFuelUsage } = await fuelService.getData(from, to);
---

<FuelLayout>
  <div class="mt-3 w-full">
    <Card>
      <div class="m-2 overflow-x-auto">
        <table class="table-pin-rows table-xs table">
          <thead>
            <tr class="bg-base-200">
              <th></th>
              <th>Data</th>
              <th>Miejsce</th>
              <th>Przebieg</th>
              <th>Ilość paliwa</th>
              <th>Koszt brutto</th>
              <th>Spalanie</th>
              <th>Odliczenie VAT</th>
              <th>Koszt netto</th>
              <th>Różnica kosztu</th>
            </tr>
          </thead>
          <tbody>
            {
              rows.map((row, index, rows) => (
                <tr>
                  <th>{index + 1}</th>
                  <td>{new Date(row.date).toLocaleDateString('pl-PL')}</td>
                  <td>
                    {row.station} - {row.city}
                  </td>
                  <td>{row.mileage}</td>
                  <td>{row.amount} l</td>
                  <td>{zloty(row.cost)}</td>
                  <td>
                    {index > 0
                      ? calculateFuelUsage(rows.slice(index - 1, index + 1)).toFixed(2)
                      : '-'}
                  </td>
                  <td>{row.deduction * 100}%</td>
                  <td>{zloty(row.costReduced)}</td>
                  <td>{zloty(row.cost - row.costReduced)}</td>
                </tr>
              ))
            }
            {
              rows.length > 0 && (
                <tr class="bg-base-200 font-semibold">
                  <th colspan="3" />
                  <td>{rows.at(-1)!.mileage - rows[0]!.mileage}</td>
                  <td>{sum(rows.map((r) => r.amount)).toFixed(2)} l</td>
                  <td>{zloty(sum(rows.map((r) => r.cost)))}</td>
                  <td>{totalFuelUsage}</td>
                  <td>
                    {(
                      (sum(rows.map((r) => r.deduction * r.cost)) / sum(rows.map((r) => r.cost))) *
                      100
                    ).toFixed(0)}
                    %
                  </td>
                  <td>{zloty(sum(rows.map((r) => r.costReduced)))}</td>
                  <td>{zloty(sum(rows.map((r) => r.costDiff)))}</td>
                </tr>
              )
            }
          </tbody>
        </table>
      </div>
    </Card>
  </div>
</FuelLayout>
